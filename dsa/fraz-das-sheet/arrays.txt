1:
https://leetcode.com/problems/two-sum/
brute force solution:
O(n2), with nested loop.
optimized solution:
using hashmap
var twoSum = function(nums, target) {
const keyMap = new Map();

    for (const [index, num] of nums.entries()) {
        const requiredNum = target - num;
        // console.log(`num: ${num}, requiredNum: ${requiredNum}`);
        if (keyMap.get(requiredNum)!==undefined) {
            return [index, keyMap.get(requiredNum)];
        }


        keyMap.set(num, index);
    }
    return [];

};

2:
https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
brute force solution:
O(n2), with nested loop.

using single pass:
var maxProfit = function(prices) {
let minPrice = Infinity;
let maxProfit = 0;

for (let i = 0; i < prices.length; i++) {
const currentPrice = prices[i];

        minPrice = Math.min(minPrice, currentPrice);
        const profit = currentPrice - minPrice;
        maxProfit = Math.max(profit, maxProfit);

    }

    return maxProfit;

};

3:
https://leetcode.com/problems/merge-sorted-array/

brute force solution: O(m+n log m+n)
/\*\*

- @param {number[]} nums1
- @param {number} m
- @param {number[]} nums2
- @param {number} n
- @return {void} Do not return anything, modify nums1 in-place instead.
  \*/
  var merge = function(nums1, m, nums2, n) {

      const len1 = nums1.length;
      const len2 = nums2.length;
      let idx1 = len1 - 1;
      for (let i = len2-1; i >= 0; i--) {
          nums1[idx1] = nums2[i];

          idx1 -=1;
      }
      console.log(` nums1 ${nums1}`);

      nums1
      nums1.sort((a, b) => a - b)

};

optimized solution: O (m+n)  
/\*\*

- @param {number[]} nums1
- @param {number} m
- @param {number[]} nums2
- @param {number} n
- @return {void} Do not return anything, modify nums1 in-place instead.
  \*/
  var merge = function(nums1, m, nums2, n) {
  const mainLen = m + n;
  let idx1 = m - 1;
  let idx2 = n - 1;

      for (let i = mainLen - 1; i >= 0; i--) {
          console.log(nums1[i]);

          if (idx1 === -1) {
              nums1[i] = nums2[idx2];
              idx2 -= 1;
              continue;
          }
          if (idx2 === -1) {
              nums1[i] = nums1[idx1];
              idx1 -= 1;
              continue;
          }


          if (nums2[idx2] > nums1[idx1]) {
              nums1[i] = nums2[idx2];
              idx2-=1;
          } else {
              nums1[i] = nums1[idx1];
              idx1 -= 1;
          }
      }

  };




4: 
https://leetcode.com/problems/move-zeroes/
